/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BinaryPlotPanel.java
 *
 * Created on 15-Jun-2009, 13:44:00
 */
package heartsim.gui;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.awt.image.WritableRaster;
import org.apache.batik.ext.awt.geom.ExtendedGeneralPath;

/**
 *
 * @author Lee Boynton
 */
public class BinaryPlotPanel extends javax.swing.JPanel
{
    private BufferedImage buffIm;
    private int[] buffer;
    private ExtendedGeneralPath[] paths;

    /** Creates new form BinaryPlotPanel */
    public BinaryPlotPanel()
    {
        initComponents();
    }

    public BinaryPlotPanel(int x, int y)
    {
        buffIm = new BufferedImage(x, y, BufferedImage.TYPE_INT_RGB);
        WritableRaster rasta = buffIm.getRaster();
        DataBufferInt buf =  (DataBufferInt) rasta.getDataBuffer();
        buffer = buf.getData();
    }

    @Override
    public void setSize(Dimension d)
    {
        buffIm = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_RGB);
        WritableRaster rasta = buffIm.getRaster();
        DataBufferInt buf =  (DataBufferInt) rasta.getDataBuffer();
        buffer = buf.getData();
        super.setSize(d);
    }

    public void reset()
    {
        for (int i = 0; i < buffer.length; i++)
        {
            buffer[i] = -1;
        }
        this.repaint();
    }

    public int[] getBuffer()
    {
        return buffer;
    }

    public void setPaths(ExtendedGeneralPath[] paths)
    {
        this.paths = paths;
    }

    public Graphics2D getBufferGraphics()
    {
        return buffIm.createGraphics();
    }

    public int getImageHeight()
    {
        return buffIm.getHeight();
    }

    public int getImageWidth()
    {
        return buffIm.getWidth();
    }

    @Override
    public void paint(Graphics g)
    {
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2.drawImage(buffIm, 0, 0, this);
        if (paths != null)
        {
            for (ExtendedGeneralPath path : paths)
            {
                // TODO
                // If SVG contains more than one path then the outline may not
                // be in the centre, so it needs to be moved to the correct place
                // an affine transform probably isn't the best way though
                //AffineTransform at = new AffineTransform();
                //at.translate(-100, -300);
                //g2.transform(at);
                g2.draw(path);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
