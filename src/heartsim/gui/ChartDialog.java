/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChartDialog.java
 *
 * Created on 27-Aug-2009, 16:30:44
 */
package heartsim.gui;

import heartsim.CellularAutomaton;
import heartsim.SimulatorListener;
import heartsim.gui.component.ActionPotentialChart;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.util.Enumeration;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JCheckBox;
import javax.swing.UIManager;

/**
 *
 * @author Lee Boynton
 */
public class ChartDialog extends javax.swing.JDialog implements SimulatorListener
{
    private ChartDialogEvent listener;
    private int[] rows = new int[8];
    private int[] cols = new int[8];
    private boolean[] enabled = new boolean[8];
    private int tissueNumber = 0;
    private Action toggleButtonAction = new ToggleButtonAction();

    /** Creates new form ChartDialog */
    private ChartDialog(java.awt.Frame parent, boolean modal)
    {
        this(parent, modal, null);
    }

    public ChartDialog(Frame owner, boolean modal, ChartDialogEvent listener)
    {
        super(owner, modal);
        this.listener = listener;

        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception ex)
        {
            System.err.println("Unable to use system look and feel");
        }

        initComponents();
    }

    public Action getButtonAction()
    {
        return toggleButtonAction;
    }

    public void setListener(ChartDialogEvent listener)
    {
        this.listener = listener;
    }

    public ActionPotentialChart getChart()
    {
        return chart;
    }

    public void setCell(int row, int col)
    {
        this.rows[tissueNumber] = row;
        this.cols[tissueNumber] = col;
        this.enabled[tissueNumber] = true;

        chart.addCell(row, col);

        for(Enumeration e = btnGrpChkBox.getElements(); e.hasMoreElements();)
        {
            JCheckBox chkBox = (JCheckBox) e.nextElement();

            if(chkBox.getActionCommand().equals(String.valueOf(tissueNumber)))
            {
                chkBox.setText(String.valueOf(row) + ", " + String.valueOf(col));
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpChooseCell = new javax.swing.ButtonGroup();
        btnGrpChkBox = new javax.swing.ButtonGroup();
        chart = new heartsim.gui.component.ActionPotentialChart();
        toggleBtnChooseCell1 = new javax.swing.JToggleButton();
        btnClose = new javax.swing.JButton();
        chkBoxVoltage = new javax.swing.JCheckBox();
        chkBoxRecovery = new javax.swing.JCheckBox();
        btnReset = new javax.swing.JButton();
        chkBoxTissue1 = new javax.swing.JCheckBox();
        toggleBtnChooseCell2 = new javax.swing.JToggleButton();
        chkBoxTissue2 = new javax.swing.JCheckBox();
        toggleBtnChooseCell3 = new javax.swing.JToggleButton();
        chkBoxTissue3 = new javax.swing.JCheckBox();
        toggleBtnChooseCell4 = new javax.swing.JToggleButton();
        chkBoxTissue4 = new javax.swing.JCheckBox();
        toggleBtnChooseCell5 = new javax.swing.JToggleButton();
        chkBoxTissue5 = new javax.swing.JCheckBox();
        toggleBtnChooseCell6 = new javax.swing.JToggleButton();
        chkBoxTissue6 = new javax.swing.JCheckBox();
        toggleBtnChooseCell7 = new javax.swing.JToggleButton();
        chkBoxTissue7 = new javax.swing.JCheckBox();
        chkBoxTissue8 = new javax.swing.JCheckBox();
        toggleBtnChooseCell8 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout chartLayout = new javax.swing.GroupLayout(chart);
        chart.setLayout(chartLayout);
        chartLayout.setHorizontalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 509, Short.MAX_VALUE)
        );
        chartLayout.setVerticalGroup(
            chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
        );

        btnGrpChooseCell.add(toggleBtnChooseCell1);
        toggleBtnChooseCell1.setText("Choose cell");
        toggleBtnChooseCell1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnChooseCell1ActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        chkBoxVoltage.setSelected(true);
        chkBoxVoltage.setText("Voltage");
        chkBoxVoltage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxVoltageActionPerformed(evt);
            }
        });

        chkBoxRecovery.setSelected(true);
        chkBoxRecovery.setText("Recovery");
        chkBoxRecovery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxRecoveryActionPerformed(evt);
            }
        });

        btnReset.setText("Reset View");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnGrpChkBox.add(chkBoxTissue1);
        chkBoxTissue1.setText("Tissue 1");

        toggleBtnChooseCell2.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell2);
        toggleBtnChooseCell2.setText("Choose cell");
        toggleBtnChooseCell2.setActionCommand("1");

        btnGrpChkBox.add(chkBoxTissue2);
        chkBoxTissue2.setText("Tissue 2");

        toggleBtnChooseCell3.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell3);
        toggleBtnChooseCell3.setText("Choose cell");
        toggleBtnChooseCell3.setActionCommand("2");

        btnGrpChkBox.add(chkBoxTissue3);
        chkBoxTissue3.setText("Tissue 3");

        toggleBtnChooseCell4.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell4);
        toggleBtnChooseCell4.setText("Choose cell");
        toggleBtnChooseCell4.setActionCommand("3");

        btnGrpChkBox.add(chkBoxTissue4);
        chkBoxTissue4.setText("Tissue 4");

        toggleBtnChooseCell5.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell5);
        toggleBtnChooseCell5.setText("Choose cell");
        toggleBtnChooseCell5.setActionCommand("4");

        btnGrpChkBox.add(chkBoxTissue5);
        chkBoxTissue5.setText("Tissue 5");

        toggleBtnChooseCell6.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell6);
        toggleBtnChooseCell6.setText("Choose cell");
        toggleBtnChooseCell6.setActionCommand("5");

        btnGrpChkBox.add(chkBoxTissue6);
        chkBoxTissue6.setText("Tissue 6");

        toggleBtnChooseCell7.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell7);
        toggleBtnChooseCell7.setText("Choose cell");
        toggleBtnChooseCell7.setActionCommand("6");

        btnGrpChkBox.add(chkBoxTissue7);
        chkBoxTissue7.setText("Tissue 7");

        btnGrpChkBox.add(chkBoxTissue8);
        chkBoxTissue8.setText("Tissue 8");

        toggleBtnChooseCell8.setAction(getButtonAction());
        btnGrpChooseCell.add(toggleBtnChooseCell8);
        toggleBtnChooseCell8.setText("Choose cell");
        toggleBtnChooseCell8.setActionCommand("7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chkBoxTissue1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(toggleBtnChooseCell1))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chkBoxTissue2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(toggleBtnChooseCell2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell5))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue7, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkBoxTissue8, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleBtnChooseCell8))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReset)
                        .addGap(10, 10, 10)
                        .addComponent(chkBoxVoltage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkBoxRecovery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 453, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell1)
                            .addComponent(chkBoxTissue1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell2)
                            .addComponent(chkBoxTissue2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell3)
                            .addComponent(chkBoxTissue3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell4)
                            .addComponent(chkBoxTissue4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell5)
                            .addComponent(chkBoxTissue5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell6)
                            .addComponent(chkBoxTissue6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell7)
                            .addComponent(chkBoxTissue7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toggleBtnChooseCell8)
                            .addComponent(chkBoxTissue8)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxVoltage)
                    .addComponent(chkBoxRecovery)
                    .addComponent(btnClose)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void toggleBtnChooseCell1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_toggleBtnChooseCell1ActionPerformed
    {//GEN-HEADEREND:event_toggleBtnChooseCell1ActionPerformed
        if (listener == null)
        {
            System.err.println("No listeners are attached to the chart dialog. Can not set the cell.");
            return;
        }

        if (toggleBtnChooseCell1.isSelected())
        {
            listener.setCellSelectionMode();
        }
        else
        {
            listener.cancelCellSelectionMode();
        }
    }//GEN-LAST:event_toggleBtnChooseCell1ActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCloseActionPerformed
    {//GEN-HEADEREND:event_btnCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void chkBoxVoltageActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkBoxVoltageActionPerformed
    {//GEN-HEADEREND:event_chkBoxVoltageActionPerformed
        chart.setVoltageEnabled(chkBoxVoltage.isSelected());
    }//GEN-LAST:event_chkBoxVoltageActionPerformed

    private void chkBoxRecoveryActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkBoxRecoveryActionPerformed
    {//GEN-HEADEREND:event_chkBoxRecoveryActionPerformed
        chart.setRecoveryEnabled(chkBoxRecovery.isSelected());
    }//GEN-LAST:event_chkBoxRecoveryActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetActionPerformed
    {//GEN-HEADEREND:event_btnResetActionPerformed
        chart.setRanges();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                ChartDialog dialog = new ChartDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.ButtonGroup btnGrpChkBox;
    private javax.swing.ButtonGroup btnGrpChooseCell;
    private javax.swing.JButton btnReset;
    private heartsim.gui.component.ActionPotentialChart chart;
    private javax.swing.JCheckBox chkBoxRecovery;
    private javax.swing.JCheckBox chkBoxTissue1;
    private javax.swing.JCheckBox chkBoxTissue2;
    private javax.swing.JCheckBox chkBoxTissue3;
    private javax.swing.JCheckBox chkBoxTissue4;
    private javax.swing.JCheckBox chkBoxTissue5;
    private javax.swing.JCheckBox chkBoxTissue6;
    private javax.swing.JCheckBox chkBoxTissue7;
    private javax.swing.JCheckBox chkBoxTissue8;
    private javax.swing.JCheckBox chkBoxVoltage;
    private javax.swing.JToggleButton toggleBtnChooseCell1;
    private javax.swing.JToggleButton toggleBtnChooseCell2;
    private javax.swing.JToggleButton toggleBtnChooseCell3;
    private javax.swing.JToggleButton toggleBtnChooseCell4;
    private javax.swing.JToggleButton toggleBtnChooseCell5;
    private javax.swing.JToggleButton toggleBtnChooseCell6;
    private javax.swing.JToggleButton toggleBtnChooseCell7;
    private javax.swing.JToggleButton toggleBtnChooseCell8;
    // End of variables declaration//GEN-END:variables

    public void simulationStarted()
    {
    }

    public void simulationPaused()
    {
    }

    public void simulationCompleted()
    {
    }

    public void simulationStopped()
    {
    }

    public void simulationUpdated(int time, CellularAutomaton ca)
    {
        for(int i = 0; i < enabled.length; i++)
        {
            if(enabled[i])
            {
                chart.setVoltageValue(time, ca.getU(rows[i], cols[i]), rows[i], cols[i]);
                chart.setRecoveryValue(time, ca.getU(rows[i], cols[i]), rows[i], cols[i]);
            }
        }
    }

    public class ToggleButtonAction extends AbstractAction
    {
        public void actionPerformed(ActionEvent e)
        {
            tissueNumber = Integer.parseInt(e.getActionCommand());
        }
    }
}
